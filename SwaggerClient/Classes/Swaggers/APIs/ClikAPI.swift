//
// ClikAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ClikAPI { 
    /**
     Create or update one or multiple entries independently
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createOrUpdateEntries(mandant: String, body: [Entry]? = nil, completion: @escaping ((_ data: [Entry]?,_ error: Error?) -> Void)) {
        createOrUpdateEntriesWithRequestBuilder(mandant: mandant, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create or update one or multiple entries independently
     - POST /mandants/{mandant}/entries
     - OAuth:
       - type: oauth2
       - name: oauth2
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Entry]> 
     */
    open class func createOrUpdateEntriesWithRequestBuilder(mandant: String, body: [Entry]? = nil) -> RequestBuilder<[Entry]> {
        var path = "/mandants/{mandant}/entries"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Entry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Delete a an entry by id
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter _id: (path) The id of the entry to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEntryById(mandant: String, _id: ObjectId, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteEntryByIdWithRequestBuilder(mandant: mandant, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a an entry by id
     - DELETE /mandants/{mandant}/entries/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter _id: (path) The id of the entry to retrieve 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteEntryByIdWithRequestBuilder(mandant: String, _id: ObjectId) -> RequestBuilder<Void> {
        var path = "/mandants/{mandant}/entries/{id}"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Read constraints for a single enumerator
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter enumeratorType: (path) The enumerator type to retrieve restrictions for 
     - parameter combinationConstraints: (query) Includes/excludes the property combinationConstraints. Must be set explicitly to false for performance reasons.  
     - parameter xPage: (header) A server defined page reference returned in the header \&quot;x-next-page\&quot; (optional)
     - parameter xPageSize: (header) How many items to return in a page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEnumerationConstraints(mandant: String, enumeratorType: EnumerationType, combinationConstraints: Bool, xPage: String? = nil, xPageSize: Int? = nil, completion: @escaping ((_ data: [EnumeratorConstraints]?,_ error: Error?) -> Void)) {
        getEnumerationConstraintsWithRequestBuilder(mandant: mandant, enumeratorType: enumeratorType, combinationConstraints: combinationConstraints, xPage: xPage, xPageSize: xPageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read constraints for a single enumerator
     - GET /mandants/{mandant}/enumeratorConstraints/{enumeratorType}/
     - OAuth:
       - type: oauth2
       - name: oauth2
     - responseHeaders: [x-next-page(String)]
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter enumeratorType: (path) The enumerator type to retrieve restrictions for 
     - parameter combinationConstraints: () Includes/excludes the property combinationConstraints. Must be set explicitly to false for performance reasons.  
     - parameter xPage: (header) A server defined page reference returned in the header \&quot;x-next-page\&quot; (optional)
     - parameter xPageSize: (header) How many items to return in a page (optional)

     - returns: RequestBuilder<[EnumeratorConstraints]> 
     */
    open class func getEnumerationConstraintsWithRequestBuilder(mandant: String, enumeratorType: EnumerationType, combinationConstraints: Bool, xPage: String? = nil, xPageSize: Int? = nil) -> RequestBuilder<[EnumeratorConstraints]> {
        var path = "/mandants/{mandant}/enumeratorConstraints/{enumeratorType}/"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let enumeratorTypePreEscape = "\(enumeratorType)"
        let enumeratorTypePostEscape = enumeratorTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enumeratorType}", with: enumeratorTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "combinationConstraints": combinationConstraints
        ])
        let nillableHeaders: [String: Any?] = [
            "x-page": xPage,
            "x-page-size": xPageSize?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[EnumeratorConstraints]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     List entries
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter status: (query) One or more statuses (disjunctive) (optional)
     - parameter startDate: (query) The minimum date of entries (optional)
     - parameter xPage: (header) A server defined page reference returned in the header \&quot;x-next-page\&quot; (optional)
     - parameter xPageSize: (header) How many items to return in a page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listEntries(mandant: String, status: [EntryStatus]? = nil, startDate: Date? = nil, xPage: String? = nil, xPageSize: Int? = nil, completion: @escaping ((_ data: [Entry]?,_ error: Error?) -> Void)) {
        listEntriesWithRequestBuilder(mandant: mandant, status: status, startDate: startDate, xPage: xPage, xPageSize: xPageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List entries
     - GET /mandants/{mandant}/entries
     - OAuth:
       - type: oauth2
       - name: oauth2
     - responseHeaders: [x-next-page(String)]
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter status: () One or more statuses (disjunctive) (optional)
     - parameter startDate: () The minimum date of entries (optional)
     - parameter xPage: (header) A server defined page reference returned in the header \&quot;x-next-page\&quot; (optional)
     - parameter xPageSize: (header) How many items to return in a page (optional)

     - returns: RequestBuilder<[Entry]> 
     */
    open class func listEntriesWithRequestBuilder(mandant: String, status: [EntryStatus]? = nil, startDate: Date? = nil, xPage: String? = nil, xPageSize: Int? = nil) -> RequestBuilder<[Entry]> {
        var path = "/mandants/{mandant}/entries"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": startDate
        ])
        let nillableHeaders: [String: Any?] = [
            "x-page": xPage,
            "x-page-size": xPageSize?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Entry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     List enumerators
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter type: (path) The enumerator type 
     - parameter parentProject: (query) The parent project to filter by (optional)
     - parameter xPage: (header) A server defined page reference returned in the header \&quot;x-next-page\&quot; (optional)
     - parameter xPageSize: (header) How many items to return in a page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listEnumerators(mandant: String, type: EnumerationType, parentProject: String? = nil, xPage: String? = nil, xPageSize: Int? = nil, completion: @escaping ((_ data: [Enumerator]?,_ error: Error?) -> Void)) {
        listEnumeratorsWithRequestBuilder(mandant: mandant, type: type, parentProject: parentProject, xPage: xPage, xPageSize: xPageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List enumerators
     - GET /mandants/{mandant}/enumerators/{type}
     - OAuth:
       - type: oauth2
       - name: oauth2
     - responseHeaders: [x-next-page(String)]
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter type: (path) The enumerator type 
     - parameter parentProject: () The parent project to filter by (optional)
     - parameter xPage: (header) A server defined page reference returned in the header \&quot;x-next-page\&quot; (optional)
     - parameter xPageSize: (header) How many items to return in a page (optional)

     - returns: RequestBuilder<[Enumerator]> 
     */
    open class func listEnumeratorsWithRequestBuilder(mandant: String, type: EnumerationType, parentProject: String? = nil, xPage: String? = nil, xPageSize: Int? = nil) -> RequestBuilder<[Enumerator]> {
        var path = "/mandants/{mandant}/enumerators/{type}"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "parentProject": parentProject
        ])
        let nillableHeaders: [String: Any?] = [
            "x-page": xPage,
            "x-page-size": xPageSize?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Enumerator]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     Read an entry by its id
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter _id: (path) The id of the entry to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readEntry(mandant: String, _id: ObjectId, completion: @escaping ((_ data: Entry?,_ error: Error?) -> Void)) {
        readEntryWithRequestBuilder(mandant: mandant, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read an entry by its id
     - GET /mandants/{mandant}/entries/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter _id: (path) The id of the entry to retrieve 

     - returns: RequestBuilder<Entry> 
     */
    open class func readEntryWithRequestBuilder(mandant: String, _id: ObjectId) -> RequestBuilder<Entry> {
        var path = "/mandants/{mandant}/entries/{id}"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Entry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Read a specific enumerator
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter type: (path) The enumerator type 
     - parameter _id: (path) The id of the enumerator to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readEnumeratorById(mandant: String, type: EnumerationType, _id: ObjectId, completion: @escaping ((_ data: Enumerator?,_ error: Error?) -> Void)) {
        readEnumeratorByIdWithRequestBuilder(mandant: mandant, type: type, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read a specific enumerator
     - GET /mandants/{mandant}/enumerators/{type}/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter type: (path) The enumerator type 
     - parameter _id: (path) The id of the enumerator to retrieve 

     - returns: RequestBuilder<Enumerator> 
     */
    open class func readEnumeratorByIdWithRequestBuilder(mandant: String, type: EnumerationType, _id: ObjectId) -> RequestBuilder<Enumerator> {
        var path = "/mandants/{mandant}/enumerators/{type}/{id}"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Enumerator>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Read constraints for a single enumerator
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter enumeratorType: (path) The enumerator type to retrieve restrictions for 
     - parameter enumeratorId: (path) The id of the enumerator to retrieve restrictions for 
     - parameter combinationConstraints: (query) Includes/excludes the property combinationConstraints (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readEnumeratorConstraintsByEnumeratorId(mandant: String, enumeratorType: EnumerationType, enumeratorId: ObjectId, combinationConstraints: Bool? = nil, completion: @escaping ((_ data: EnumeratorConstraints?,_ error: Error?) -> Void)) {
        readEnumeratorConstraintsByEnumeratorIdWithRequestBuilder(mandant: mandant, enumeratorType: enumeratorType, enumeratorId: enumeratorId, combinationConstraints: combinationConstraints).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read constraints for a single enumerator
     - GET /mandants/{mandant}/enumeratorConstraints/{enumeratorType}/{enumeratorId}
     - OAuth:
       - type: oauth2
       - name: oauth2
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter enumeratorType: (path) The enumerator type to retrieve restrictions for 
     - parameter enumeratorId: (path) The id of the enumerator to retrieve restrictions for 
     - parameter combinationConstraints: () Includes/excludes the property combinationConstraints (optional)

     - returns: RequestBuilder<EnumeratorConstraints> 
     */
    open class func readEnumeratorConstraintsByEnumeratorIdWithRequestBuilder(mandant: String, enumeratorType: EnumerationType, enumeratorId: ObjectId, combinationConstraints: Bool? = nil) -> RequestBuilder<EnumeratorConstraints> {
        var path = "/mandants/{mandant}/enumeratorConstraints/{enumeratorType}/{enumeratorId}"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let enumeratorTypePreEscape = "\(enumeratorType)"
        let enumeratorTypePostEscape = enumeratorTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enumeratorType}", with: enumeratorTypePostEscape, options: .literal, range: nil)
        let enumeratorIdPreEscape = "\(enumeratorId)"
        let enumeratorIdPostEscape = enumeratorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enumeratorId}", with: enumeratorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "combinationConstraints": combinationConstraints
        ])

        let requestBuilder: RequestBuilder<EnumeratorConstraints>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Create or update an entry by id
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter _id: (path) The id of the entry to retrieve 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOrCreateEntryById(mandant: String, _id: ObjectId, body: Entry? = nil, completion: @escaping ((_ data: Entry?,_ error: Error?) -> Void)) {
        updateOrCreateEntryByIdWithRequestBuilder(mandant: mandant, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create or update an entry by id
     - PUT /mandants/{mandant}/entries/{id}
     - OAuth:
       - type: oauth2
       - name: oauth2
     
     - parameter mandant: (path) The mandant to operate on 
     - parameter _id: (path) The id of the entry to retrieve 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Entry> 
     */
    open class func updateOrCreateEntryByIdWithRequestBuilder(mandant: String, _id: ObjectId, body: Entry? = nil) -> RequestBuilder<Entry> {
        var path = "/mandants/{mandant}/entries/{id}"
        let mandantPreEscape = "\(mandant)"
        let mandantPostEscape = mandantPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mandant}", with: mandantPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Entry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

}
